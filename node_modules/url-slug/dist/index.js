(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.urlSlug = {}));
})(this, (function (exports) { 'use strict';

    const CAMELCASE_REGEXP_PATTERN = '(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))';
    function replace(value, dictionary) {
        for (let index = 0, length = value.length; index < length; index++) {
            const char = value[index];
            const replacement = dictionary[char] && String(dictionary[char]);
            if (replacement !== undefined) {
                value = value.slice(0, index) + replacement + value.slice(index + 1);
                const addedCharsCount = replacement.length - 1;
                index += addedCharsCount;
                length += addedCharsCount;
            }
        }
        return value;
    }

    const LOWERCASE_TRANSFORMER = (fragments, separator) => {
        return fragments.join(separator).toLowerCase();
    };
    const SENTENCECASE_TRANSFORMER = (fragments, separator) => {
        const sentence = fragments.join(separator);
        return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();
    };
    const TITLECASE_TRANSFORMER = (fragments, separator) => {
        const buffer = [];
        for (let index = 0; index < fragments.length; index++) {
            buffer.push(fragments[index].charAt(0).toUpperCase() +
                fragments[index].slice(1).toLowerCase());
        }
        return buffer.join(separator);
    };
    const UPPERCASE_TRANSFORMER = (fragments, separator) => {
        return fragments.join(separator).toUpperCase();
    };

    // eslint-disable-next-line no-misleading-character-class
    const COMBINING_CHARS = /[\u0300-\u036F\u1AB0-\u1AFF\u1DC0-\u1DFF]+/g;
    const CONVERT = /[A-Za-z\d]+/g;
    const CONVERT_CAMELCASE = new RegExp('[A-Za-z\\d]*?' + CAMELCASE_REGEXP_PATTERN + '|[A-Za-z\\d]+', 'g');
    function convert(value, { camelCase = true, dictionary, separator = '-', transformer = LOWERCASE_TRANSFORMER, } = {}) {
        const fragments = (dictionary ? replace(String(value), dictionary) : String(value))
            .normalize('NFKD')
            .replace(COMBINING_CHARS, '')
            .match(camelCase ? CONVERT_CAMELCASE : CONVERT);
        if (!fragments) {
            return '';
        }
        return transformer
            ? transformer(fragments, String(separator))
            : fragments.join(String(separator));
    }

    const REVERT = /[^-._~!$&'()*+,;=]+/g;
    const REVERT_CAMELCASE = new RegExp("[^-._~!$&'()*+,;=]*?" + CAMELCASE_REGEXP_PATTERN + "|[^-._~!$&'()*+,;=]+", 'g');
    const REVERT_CAMELCASE_ONLY = new RegExp('.*?' + CAMELCASE_REGEXP_PATTERN + '|.+', 'g');
    function revert(value, { camelCase = false, separator = null, transformer = null, } = {}) {
        let fragments;
        value = String(value);
        /* Determine which method will be used to split the slug */
        if (separator === '') {
            fragments = camelCase ? value.match(REVERT_CAMELCASE_ONLY) : [value];
        }
        else if (typeof separator === 'string') {
            fragments = value.split(separator);
        }
        else {
            fragments = value.match(camelCase ? REVERT_CAMELCASE : REVERT);
        }
        if (!fragments) {
            return '';
        }
        return transformer ? transformer(fragments, ' ') : fragments.join(' ');
    }

    exports.LOWERCASE_TRANSFORMER = LOWERCASE_TRANSFORMER;
    exports.SENTENCECASE_TRANSFORMER = SENTENCECASE_TRANSFORMER;
    exports.TITLECASE_TRANSFORMER = TITLECASE_TRANSFORMER;
    exports.UPPERCASE_TRANSFORMER = UPPERCASE_TRANSFORMER;
    exports.convert = convert;
    exports.default = convert;
    exports.revert = revert;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.js.map
