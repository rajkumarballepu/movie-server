{"version":3,"file":"index.js","sources":["../src/helpers.ts","../src/transformers.ts","../src/convert.ts","../src/revert.ts"],"sourcesContent":["export type Dictionary = Record<string, string>\n\nexport const CAMELCASE_REGEXP_PATTERN = '(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))'\n\nexport function replace(value: string, dictionary: Dictionary): string {\n  for (let index = 0, length = value.length; index < length; index++) {\n    const char = value[index]\n    const replacement = dictionary[char] && String(dictionary[char])\n\n    if (replacement !== undefined) {\n      value = value.slice(0, index) + replacement + value.slice(index + 1)\n\n      const addedCharsCount = replacement.length - 1\n\n      index += addedCharsCount\n      length += addedCharsCount\n    }\n  }\n\n  return value\n}\n","export type Transformer = (fragments: string[], separator: string) => string\n\nexport const LOWERCASE_TRANSFORMER: Transformer = (fragments, separator) => {\n  return fragments.join(separator).toLowerCase()\n}\n\nexport const SENTENCECASE_TRANSFORMER: Transformer = (fragments, separator) => {\n  const sentence = fragments.join(separator)\n\n  return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase()\n}\n\nexport const TITLECASE_TRANSFORMER: Transformer = (fragments, separator) => {\n  const buffer = []\n\n  for (let index = 0; index < fragments.length; index++) {\n    buffer.push(\n      fragments[index].charAt(0).toUpperCase() +\n        fragments[index].slice(1).toLowerCase()\n    )\n  }\n\n  return buffer.join(separator)\n}\n\nexport const UPPERCASE_TRANSFORMER: Transformer = (fragments, separator) => {\n  return fragments.join(separator).toUpperCase()\n}\n","import { CAMELCASE_REGEXP_PATTERN, type Dictionary, replace } from './helpers'\nimport { LOWERCASE_TRANSFORMER, type Transformer } from './transformers'\n\n// eslint-disable-next-line no-misleading-character-class\nconst COMBINING_CHARS = /[\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF]+/g\n\nconst CONVERT = /[A-Za-z\\d]+/g\n\nconst CONVERT_CAMELCASE = new RegExp(\n  '[A-Za-z\\\\d]*?' + CAMELCASE_REGEXP_PATTERN + '|[A-Za-z\\\\d]+',\n  'g'\n)\n\nexport interface ConvertOptions {\n  camelCase?: boolean\n  dictionary?: Dictionary\n  separator?: string\n  transformer?: Transformer | null\n}\n\nexport default function convert(\n  value: string,\n  {\n    camelCase = true,\n    dictionary,\n    separator = '-',\n    transformer = LOWERCASE_TRANSFORMER,\n  }: ConvertOptions = {}\n): string {\n  const fragments = (\n    dictionary ? replace(String(value), dictionary) : String(value)\n  )\n    .normalize('NFKD')\n    .replace(COMBINING_CHARS, '')\n    .match(camelCase ? CONVERT_CAMELCASE : CONVERT)\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer\n    ? transformer(fragments, String(separator))\n    : fragments.join(String(separator))\n}\n","import { CAMELCASE_REGEXP_PATTERN } from './helpers'\nimport { type Transformer } from './transformers'\n\nconst REVERT = /[^-._~!$&'()*+,;=]+/g\n\nconst REVERT_CAMELCASE = new RegExp(\n  \"[^-._~!$&'()*+,;=]*?\" + CAMELCASE_REGEXP_PATTERN + \"|[^-._~!$&'()*+,;=]+\",\n  'g'\n)\n\nconst REVERT_CAMELCASE_ONLY = new RegExp(\n  '.*?' + CAMELCASE_REGEXP_PATTERN + '|.+',\n  'g'\n)\n\nexport interface RevertOptions {\n  camelCase?: boolean\n  separator?: string | null\n  transformer?: Transformer | null\n}\n\nexport default function revert(\n  value: string,\n  {\n    camelCase = false,\n    separator = null,\n    transformer = null,\n  }: RevertOptions = {}\n): string {\n  let fragments\n\n  value = String(value)\n\n  /* Determine which method will be used to split the slug */\n\n  if (separator === '') {\n    fragments = camelCase ? value.match(REVERT_CAMELCASE_ONLY) : [value]\n  } else if (typeof separator === 'string') {\n    fragments = value.split(separator)\n  } else {\n    fragments = value.match(camelCase ? REVERT_CAMELCASE : REVERT)\n  }\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer ? transformer(fragments, ' ') : fragments.join(' ')\n}\n"],"names":[],"mappings":"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"}